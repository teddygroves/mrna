
// Code generated by stanc v2.30.0
#include <stan/model/model_header.hpp>
namespace lognormal_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 46> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 28, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 29, column 2 to column 23)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 32, column 2 to line 33, column 81)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 43, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 44, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 47, column 6 to column 63)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 48, column 6 to column 82)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 46, column 32 to line 49, column 5)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 46, column 4 to line 49, column 5)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 45, column 21 to line 50, column 3)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 45, column 2 to line 50, column 3)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 36, column 2 to column 68)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 37, column 2 to column 56)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 39, column 4 to column 61)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 38, column 17 to line 40, column 3)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 38, column 2 to line 40, column 3)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 6, column 2 to column 17)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 7, column 2 to column 23)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 8, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 9, column 2 to column 37)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 10, column 2 to column 36)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 11, column 9 to column 10)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 11, column 2 to column 16)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 12, column 8 to column 9)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 12, column 2 to column 26)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 13, column 8 to column 15)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 13, column 2 to column 47)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 14, column 8 to column 14)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 14, column 2 to column 45)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 15, column 2 to column 34)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 18, column 2 to line 20, column 44)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 21, column 2 to column 36)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 22, column 2 to column 18)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 23, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 24, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 25, column 2 to column 22)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 32, column 8 to column 9)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 43, column 9 to column 15)",
 " (in '/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 44, column 9 to column 15)",
 " (in '/Users/tedgro/Code/mrna/src/stan/custom_functions.stan', line 4, column 2, included from\n'/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 3, column 0)",
 " (in '/Users/tedgro/Code/mrna/src/stan/custom_functions.stan', line 6, column 4, included from\n'/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 3, column 0)",
 " (in '/Users/tedgro/Code/mrna/src/stan/custom_functions.stan', line 5, column 16, included from\n'/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 3, column 0)",
 " (in '/Users/tedgro/Code/mrna/src/stan/custom_functions.stan', line 5, column 2, included from\n'/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 3, column 0)",
 " (in '/Users/tedgro/Code/mrna/src/stan/custom_functions.stan', line 8, column 2, included from\n'/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 3, column 0)",
 " (in '/Users/tedgro/Code/mrna/src/stan/custom_functions.stan', line 3, column 52, included from\n'/Users/tedgro/Code/mrna/src/stan/lognormal.stan', line 3, column 0)"};

struct dPdt_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_eigen_matrix_dynamic<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                       stan::base_type_t<T3__>>, -1, 1>
  operator()(const T0__& time, const T1__& c, const T2__& S, const T3__& p,
             std::ostream* pstream__) const;
};
struct dPdt_odefunctor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_eigen_matrix_dynamic<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                       stan::base_type_t<T3__>>, -1, 1>
  operator()(const T0__& time, const T1__& c, std::ostream* pstream__,
             const T2__& S, const T3__& p) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     stan::base_type_t<T3__>>, -1, 1>
  dPdt(const T0__& time, const T1__& c_arg__, const T2__& S_arg__,
       const T3__& p_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& c = stan::math::to_ref(c_arg__);
    const auto& S = stan::math::to_ref(S_arg__);
    const auto& p = stan::math::to_ref(p_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> c_min_zero =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 43;
      for (int i = 1; i <= 3; ++i) {
        current_statement__ = 41;
        stan::model::assign(c_min_zero,
          (
             stan::math::logical_lt(
               stan::model::rvalue(c, "c", stan::model::index_uni(i)), 0) ? 0
             : stan::model::rvalue(c, "c", stan::model::index_uni(i))),
          "assigning variable c_min_zero", stan::model::index_uni(i));
      }
      current_statement__ = 44;
      return stan::math::multiply(S,
               (Eigen::Matrix<local_scalar_t__,-1,1>(7) <<
               (stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                 stan::model::rvalue(c_min_zero, "c_min_zero",
                   stan::model::index_uni(1))),
               (stan::model::rvalue(p, "p", stan::model::index_uni(2)) *
                 stan::model::rvalue(c_min_zero, "c_min_zero",
                   stan::model::index_uni(2))),
               (stan::model::rvalue(p, "p", stan::model::index_uni(3)) *
                 stan::model::rvalue(c_min_zero, "c_min_zero",
                   stan::model::index_uni(2))),
               (stan::model::rvalue(p, "p", stan::model::index_uni(5)) *
                 stan::model::rvalue(c_min_zero, "c_min_zero",
                   stan::model::index_uni(3))),
               (stan::model::rvalue(p, "p", stan::model::index_uni(5)) *
                 stan::model::rvalue(c_min_zero, "c_min_zero",
                   stan::model::index_uni(2))),
               (stan::model::rvalue(p, "p", stan::model::index_uni(5)) *
                 stan::model::rvalue(c_min_zero, "c_min_zero",
                   stan::model::index_uni(1))),
               ((stan::model::rvalue(p, "p", stan::model::index_uni(4)) *
                  stan::model::rvalue(c_min_zero, "c_min_zero",
                    stan::model::index_uni(3))) *
                 stan::model::rvalue(c_min_zero, "c_min_zero",
                   stan::model::index_uni(1)))).finished());
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     stan::base_type_t<T3__>>, -1, 1>
dPdt_functor__::operator()(const T0__& time, const T1__& c, const T2__& S,
                           const T3__& p, std::ostream* pstream__)  const
{
  return dPdt(time, c, S, p, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     stan::base_type_t<T3__>>, -1, 1>
dPdt_odefunctor__::operator()(const T0__& time, const T1__& c,
                              std::ostream* pstream__, const T2__& S,
                              const T3__& p)  const
{
  return dPdt(time, c, S, p, pstream__);
}

 class lognormal_model final : public model_base_crtp<lognormal_model> {

 private:
  int N;
  int N_train;
  int N_test;
  std::vector<Eigen::Matrix<double, -1, 1>> p_loc_and_scale;
  std::vector<double> sigma_loc_and_scale;
  Eigen::Matrix<double, -1, 1> y_m_data__;
  std::vector<double> sim_times;
  std::vector<int> ix_train;
  std::vector<int> ix_test;
  int likelihood;
  Eigen::Matrix<double, -1, -1> S_data__;
  Eigen::Matrix<double, -1, 1> conc_init_data__;
  double t_init;
  double abstol;
  double reltol;
  int steps; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_m{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> S{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> conc_init{nullptr, 0};
 
 public:
  ~lognormal_model() { }
  
  inline std::string model_name() const final { return "lognormal_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.0", "stancflags = --warn-pedantic --include-paths=/Users/tedgro/Code/mrna/src/stan"};
  }
  
  
  lognormal_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lognormal_model_namespace::lognormal_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 17;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 18;
      context__.validate_dims("data initialization","N_train","int",
           std::vector<size_t>{});
      N_train = std::numeric_limits<int>::min();
      
      
      current_statement__ = 18;
      N_train = context__.vals_i("N_train")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "N_train", N_train, 1);
      current_statement__ = 19;
      context__.validate_dims("data initialization","N_test","int",
           std::vector<size_t>{});
      N_test = std::numeric_limits<int>::min();
      
      
      current_statement__ = 19;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "N_test", N_test, 1);
      current_statement__ = 20;
      context__.validate_dims("data initialization","p_loc_and_scale",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(5)});
      p_loc_and_scale = 
        std::vector<Eigen::Matrix<double, -1, 1>>(2, 
          Eigen::Matrix<double, -1, 1>::Constant(5,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> p_loc_and_scale_flat__;
        current_statement__ = 20;
        p_loc_and_scale_flat__ = context__.vals_r("p_loc_and_scale");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 20;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 20;
            stan::model::assign(p_loc_and_scale,
              p_loc_and_scale_flat__[(pos__ - 1)],
              "assigning variable p_loc_and_scale", stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(sym1__));
            current_statement__ = 20;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 21;
      context__.validate_dims("data initialization","sigma_loc_and_scale",
          "double", std::vector<size_t>{static_cast<size_t>(2)});
      sigma_loc_and_scale = 
        std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 21;
      sigma_loc_and_scale = context__.vals_r("sigma_loc_and_scale");
      current_statement__ = 22;
      stan::math::validate_non_negative_index("y_m", "N", N);
      current_statement__ = 23;
      context__.validate_dims("data initialization","y_m","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y_m_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&y_m) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_m_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> y_m_flat__;
        current_statement__ = 23;
        y_m_flat__ = context__.vals_r("y_m");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 23;
          stan::model::assign(y_m, y_m_flat__[(pos__ - 1)],
            "assigning variable y_m", stan::model::index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      stan::math::validate_non_negative_index("sim_times", "N", N);
      current_statement__ = 25;
      context__.validate_dims("data initialization","sim_times","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      sim_times = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 25;
      sim_times = context__.vals_r("sim_times");
      current_statement__ = 26;
      stan::math::validate_non_negative_index("ix_train", "N_train", N_train);
      current_statement__ = 27;
      context__.validate_dims("data initialization","ix_train","int",
           std::vector<size_t>{static_cast<size_t>(N_train)});
      ix_train = std::vector<int>(N_train, std::numeric_limits<int>::min());
      
      
      current_statement__ = 27;
      ix_train = context__.vals_i("ix_train");
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "ix_train", ix_train, 1);
      current_statement__ = 27;
      stan::math::check_less_or_equal(function__, "ix_train", ix_train, N);
      current_statement__ = 28;
      stan::math::validate_non_negative_index("ix_test", "N_test", N_test);
      current_statement__ = 29;
      context__.validate_dims("data initialization","ix_test","int",
           std::vector<size_t>{static_cast<size_t>(N_test)});
      ix_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      
      
      current_statement__ = 29;
      ix_test = context__.vals_i("ix_test");
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "ix_test", ix_test, 1);
      current_statement__ = 29;
      stan::math::check_less_or_equal(function__, "ix_test", ix_test, N);
      current_statement__ = 30;
      context__.validate_dims("data initialization","likelihood","int",
           std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "likelihood",
                                            likelihood, 0);
      current_statement__ = 30;
      stan::math::check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 31;
      S_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(3, 7,
          std::numeric_limits<double>::quiet_NaN());
      new (&S) Eigen::Map<Eigen::Matrix<double, -1, -1>>(S_data__.data(), 3, 7);
        
      
      current_statement__ = 31;
      stan::model::assign(S, stan::math::to_matrix(
        std::vector<Eigen::Matrix<double, 1, -1>>{
        (Eigen::Matrix<double,1,-1>(7) << -1, 0, 1, 0, 0, -1, -1).finished(),
        (Eigen::Matrix<double,1,-1>(7) << 1, -1, 0, 0, -1, 0, 0).finished(),
        (Eigen::Matrix<double,1,-1>(7) << 0, 1, 0, -1, 0, 0, 0).finished()}),
        "assigning variable S");
      current_statement__ = 32;
      conc_init_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(3,
          std::numeric_limits<double>::quiet_NaN());
      new (&conc_init) Eigen::Map<Eigen::Matrix<double, -1, 1>>(conc_init_data__.data(), 3);
        
      
      current_statement__ = 32;
      stan::model::assign(conc_init, (Eigen::Matrix<double,-1,1>(3) << 10, 5,
        0).finished(), "assigning variable conc_init");
      current_statement__ = 33;
      t_init = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 33;
      t_init = 0;
      current_statement__ = 34;
      abstol = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 34;
      abstol = 1e-12;
      current_statement__ = 35;
      reltol = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 35;
      reltol = 1e-12;
      current_statement__ = 36;
      steps = std::numeric_limits<int>::min();
      
      
      current_statement__ = 36;
      steps = 1000000;
      current_statement__ = 37;
      stan::math::validate_non_negative_index("conc", "N", N);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("yrep", "N_test", N_test);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("llik", "N_test", N_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 5;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lognormal_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> p =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(5, DUMMY_VAR__);
      current_statement__ = 2;
      p = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__, 5);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> conc =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__));
      current_statement__ = 3;
      stan::model::assign(conc,
        stan::math::ode_bdf_tol(dPdt_odefunctor__(), conc_init, t_init,
          sim_times, abstol, reltol, steps, pstream__, S, p),
        "assigning variable conc");
      {
        current_statement__ = 12;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(sigma,
            stan::model::rvalue(sigma_loc_and_scale, "sigma_loc_and_scale",
              stan::model::index_uni(1)),
            stan::model::rvalue(sigma_loc_and_scale, "sigma_loc_and_scale",
              stan::model::index_uni(2))));
        current_statement__ = 13;
        lp_accum__.add(
          stan::math::lognormal_lpdf<propto__>(p,
            stan::model::rvalue(p_loc_and_scale, "p_loc_and_scale",
              stan::model::index_uni(1)),
            stan::model::rvalue(p_loc_and_scale, "p_loc_and_scale",
              stan::model::index_uni(2))));
        current_statement__ = 16;
        if (likelihood) {
          current_statement__ = 14;
          lp_accum__.add(
            stan::math::lognormal_lpdf<propto__>(
              stan::model::rvalue(y_m, "y_m",
                stan::model::index_multi(ix_train)),
              stan::math::log(
                stan::model::rvalue(conc, "conc",
                  stan::model::index_multi(ix_train),
                    stan::model::index_uni(1))), sigma));
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lognormal_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> p =
         Eigen::Matrix<double, -1, 1>::Constant(5,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      p = in__.template read_constrain_lb<
            Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__, 5);
      std::vector<Eigen::Matrix<double, -1, 1>> conc =
         std::vector<Eigen::Matrix<double, -1, 1>>(N, 
           Eigen::Matrix<double, -1, 1>::Constant(3,
             std::numeric_limits<double>::quiet_NaN()));
      out__.write(sigma);
      out__.write(p);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 3;
      stan::model::assign(conc,
        stan::math::ode_bdf_tol(dPdt_odefunctor__(), conc_init, t_init,
          sim_times, abstol, reltol, steps, pstream__, S, p),
        "assigning variable conc");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(conc[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> yrep =
         Eigen::Matrix<double, -1, 1>::Constant(N_test,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> llik =
         Eigen::Matrix<double, -1, 1>::Constant(N_test,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      for (int n = 1; n <= N_test; ++n) {
        current_statement__ = 9;
        if (stan::math::logical_gt(
              stan::model::rvalue(
                stan::model::rvalue(conc, "conc",
  stan::model::index_uni(stan::model::rvalue(ix_test, "ix_test",
                           stan::model::index_uni(n)))),
                "conc[ix_test[n]]", stan::model::index_uni(1)), 0)) {
          current_statement__ = 6;
          stan::model::assign(yrep,
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(
                  stan::model::rvalue(conc, "conc",
  stan::model::index_uni(stan::model::rvalue(ix_test, "ix_test",
                           stan::model::index_uni(n)))),
                  "conc[ix_test[n]]", stan::model::index_uni(1))), sigma,
              base_rng__),
            "assigning variable yrep", stan::model::index_uni(n));
          current_statement__ = 7;
          stan::model::assign(llik,
            stan::math::lognormal_lpdf<false>(
              stan::model::rvalue(y_m, "y_m",
                stan::model::index_uni(stan::model::rvalue(ix_test,
                                         "ix_test",
                                         stan::model::index_uni(n)))),
              stan::math::log(
                stan::model::rvalue(
                  stan::model::rvalue(conc, "conc",
  stan::model::index_uni(stan::model::rvalue(ix_test, "ix_test",
                           stan::model::index_uni(n)))),
                  "conc[ix_test[n]]", stan::model::index_uni(1))), sigma),
            "assigning variable llik", stan::model::index_uni(n));
        } 
      }
      out__.write(yrep);
      out__.write(llik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> p =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(5, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        stan::model::assign(p, in__.read<local_scalar_t__>(),
          "assigning variable p", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"sigma", "p", "conc", "yrep", "llik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(5)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(N_test)},
      std::vector<size_t>{static_cast<size_t>(N_test)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yrep" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "llik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"yrep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (1 + 5);
      const size_t num_transformed = emit_transformed_parameters * 
  (N * 3);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (N_test + N_test);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (1 + 5);
      const size_t num_transformed = emit_transformed_parameters * 
  (N * 3);
      const size_t num_gen_quantities = emit_generated_quantities * 
  (N_test + N_test);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 2> names__{"sigma", "p"};
      const std::array<Eigen::Index, 2> constrain_param_sizes__{1, 5};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = lognormal_model_namespace::lognormal_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lognormal_model_namespace::profiles__;
}

#endif


